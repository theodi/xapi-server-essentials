<%- include('../../partials/header') %>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<link rel="stylesheet" href="//cdn.datatables.net/2.1.8/css/dataTables.dataTables.min.css">
<link rel="stylesheet" href="//cdn.datatables.net/fixedcolumns/5.0.3/css/fixedColumns.dataTables.css">
<script src="//cdn.datatables.net/2.1.8/js/dataTables.min.js"></script>
<script src="//cdn.datatables.net/fixedcolumns/5.0.3/js/dataTables.fixedColumns.js"></script>
<script src="//cdn.datatables.net/fixedcolumns/5.0.3/js/fixedColumns.dataTables.js"></script>
<style>
    th, td { white-space: nowrap; }
</style>


<div class="content-block white">
    <div style="max-width: 1200px; margin-left: auto; margin-right: auto">
        <h1>Client Dashboard</h1>

        <h2>Overall Summary</h2>
        <div id="overallSummaryContent" class="summary-content"></div>

        <canvas id="OverallLine" width="400" height="200"></canvas>
        <h3>Monthly new engagements</h3>
        <p>These figures show the breakdown of the above chart as monthly figures (non-cumulative)</p>
        <div id="overallMonthlyFiguresTable">
            <!-- Monthly figures table will be populated here -->
        </div>
        <h3>Progression through learning</h3>
        <p>This section shows a count of actors who have interacted with <i>n</i> activities. The more actors have interacted with, the better.</p>
        <div id="progressionSummary">
            <!-- Progression data will be populated here -->
        </div>


        <h2>Activity Summaries</h2>
        <div id="dashboardContent">
            <!-- Content will be dynamically populated here -->
        </div>

        <p id="noActivitiesMessage" style="display:none;">No activities available for this client.</p>
    </div>
</div>

<template id="numberTemplate">
    <div class="numberBox">
        <div class="title" id="templateTitle"></div>
        <div class="number" id="templateNumber"></div>
    </div>
</template>

<style>
    .numberBox {
        display: inline-block;
        border: 1px solid #ddd;
        padding: 20px;
        margin: 10px;
        text-align: center;
        border-radius: 8px;
        background-color: #f4f4f4;
    }
    .title {
        font-weight: bold;
        margin-bottom: 10px;
    }
    .number {
        font-size: 1.5em;
        color: #333;
    }
    .verb-progression {
        margin: 20px 0;
    }
    .verb-progression h3 {
        font-weight: bold;
        margin-bottom: 10px;
    }
</style>

<script>
$(document).ready(function () {
    const clientId = '<%= clientId %>'; // Only pass the clientId via EJS

    // Fetch overall summary without filtering by activityId
    $.ajax({
        url: `/clients/${clientId}/overall-summary`,
        method: 'GET',
        headers: {
            'Accept': 'application/json'
        },
        success: function(summaryData) {
            const container = $('#overallSummaryContent');
            summaryData.forEach(item => {
                const verb = getVerbFromUrl(item.verb);
                const count = item.count;

                const template = document.getElementById('numberTemplate').content.cloneNode(true);
                $(template).find('#templateTitle').text(verb);
                $(template).find('#templateNumber').text(count);

                container.append(template);
            });
        }
    });

    // Fetch cumulative monthly data for each activity
    $.ajax({
        url: `/clients/${clientId}/monthly-verb-summary-all`,
        method: 'GET',
        headers: {
            'Accept': 'application/json'
        },
        success: function(data) {
            renderCumulativeLineChart(data, "OverallLine");
            renderMonthlyFiguresTable(data, "overallMonthlyFiguresTable");
        }
    });

    $.ajax({
        url: `/clients/${clientId}/actor-progression-summary`,
        method: 'GET',
        headers: {
            'Accept': 'application/json' // Ensure the request asks for JSON
        },
        success: function(progressionData) {
            // Create a set of unique activity counts to use as column headers
            const activityLevels = new Set();
            progressionData.forEach(verbData => {
                verbData.progression.forEach(level => {
                    activityLevels.add(level.activities);
                });
            });

            // Sort the activity levels and convert to an array
            const sortedActivityLevels = Array.from(activityLevels).sort((a, b) => a - b);

            // Build the table
            const table = $('<table class="progressionTable"><thead><tr><th>Verb</th></tr></thead><tbody></tbody></table>');

            // Append activity levels as table headers
            sortedActivityLevels.forEach(level => {
                table.find('thead tr').append(`<th>${level} Activities</th>`);
            });

            // Populate each row with verb and actor counts for each activity level
            progressionData.forEach(verbData => {
                const row = $(`<tr><td>${getVerbFromUrl(verbData.verb)}</td></tr>`);
                sortedActivityLevels.forEach(level => {
                    const count = verbData.progression.find(item => item.activities === level);
                    row.append(`<td>${count ? count.actors : 0}</td>`);
                });
                table.find('tbody').append(row);
            });

            // Append the table to the progressionSummary container
            $('#progressionSummary').empty().append(table);
        },
        error: function() {
            $('#progressionSummary').text("Unable to load progression data.");
        }
    });

    // Fetch client data including dashboardActivities for individual activity summaries
    $.ajax({
        url: `/clients/${clientId}`,
        method: 'GET',
        headers: {
            'Accept': 'application/json'
        },
        success: function(clientData) {
            if (clientData.dashboardActivities && clientData.dashboardActivities.length > 0) {
                $('#noActivitiesMessage').hide();

                // Process each dashboard activity
                clientData.dashboardActivities.forEach(function(activity) {
                    const activityId = activity.uri;
                    const chartId = 'chart-' + activityId.replace(/[^a-zA-Z0-9]/g, '_');
                    const tableId = 'table-' + activityId.replace(/[^a-zA-Z0-9]/g, '_');

                    $('#dashboardContent').append(`
                        <div class="activity-summary">
                            <h3>${activity.name || activity.uri}</h3>
                            <div id="activity-${activityId.replace(/[^a-zA-Z0-9]/g, '_')}-summary"></div>
                            <canvas id="${chartId}Line" width="400" height="200"></canvas>
                            <div id="${tableId}"></div>
                        </div>
                    `);

                    // Fetch activity-specific summary
                    $.ajax({
                        url: `/clients/${clientId}/activity-summary`,
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json'
                        },
                        data: { activity: encodeURIComponent(activityId) },
                        success: function(summaryData) {
                            const container = $(`#activity-${activityId.replace(/[^a-zA-Z0-9]/g, '_')}-summary`);

                            summaryData.forEach(item => {
                                const verb = getVerbFromUrl(item.verb);
                                const count = item.count;

                                const template = document.getElementById('numberTemplate').content.cloneNode(true);
                                $(template).find('#templateTitle').text(verb);
                                $(template).find('#templateNumber').text(count);

                                container.append(template);
                            });
                        }
                    });

                    // Fetch cumulative monthly data for each activity
                    $.ajax({
                        url: `/clients/${clientId}/monthly-verb-summary`,
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json'
                        },
                        data: { activity: encodeURIComponent(activityId) },
                        success: function(data) {
                            renderCumulativeLineChart(data, chartId + "Line");
                            renderMonthlyFiguresTable(data, tableId);
                        }
                    });
                });
            } else {
                $('#noActivitiesMessage').show();
            }
        }
    });

    function renderMonthlyFiguresTable(data, elementName) {
        const allMonths = new Set();
        const verbDataMap = {};

        // Organize data by verb and capture all unique months
        data.forEach(entry => {
            const { yearMonth, verb, uniqueInteractions } = entry;
            allMonths.add(yearMonth);

            if (!verbDataMap[verb]) {
                verbDataMap[verb] = {};
            }
            verbDataMap[verb][yearMonth] = uniqueInteractions;
        });

        // Sort months and limit display to the last 12
        const sortedMonths = Array.from(allMonths).sort();
        const displayMonths = sortedMonths.slice(-12);
        const tableId = elementName + "DataTable";
        // Create table structure
        const table = $('<table class="monthlyFiguresTable" id="'+tableId+'"><thead><tr><th>Verb</th></tr></thead><tbody></tbody></table>');

        // Append the last 12 months as headers
        displayMonths.forEach(month => {
            table.find('thead tr').append(`<th>${month}</th>`);
        });

        // Populate table rows with data for each verb
        Object.keys(verbDataMap).forEach(verb => {
            const row = $(`<tr><td>${getVerbFromUrl(verb)}</td></tr>`);
            displayMonths.forEach(month => {
                const count = verbDataMap[verb][month] || 0;
                row.append(`<td>${count}</td>`);
            });
            table.find('tbody').append(row);
        });

        // Append the table to the monthlyFiguresTable container and initialize DataTables
        $('#'+elementName).empty().append(table);

        // Initialize DataTables with horizontal scrolling and paging for 12 columns
        $('#'+tableId).DataTable({
            fixedColumns: true,
            scrollX: true,
            paging: false,
            scrollCollapse: true,
            scrollX: true,
            searching: false,
            info: false,
            drawCallback: function () {
                setTimeout(function() {
                    console.log('in here');
                    // Scroll to the right by default
                    const tableContainer = $('#'+tableId).parent();
                    tableContainer.scrollLeft(tableContainer.get(0).scrollWidth);
                },1000);
            }
        });
    }

    function renderCumulativeLineChart(data, chartId) {
        const cumulativeData = {};
        const allMonths = new Set();

        data.forEach(entry => {
            const { yearMonth, verb, uniqueInteractions } = entry;
            allMonths.add(yearMonth);

            if (!cumulativeData[verb]) {
                cumulativeData[verb] = { cumulativeCount: 0 };
            }

            cumulativeData[verb][yearMonth] = cumulativeData[verb].cumulativeCount + uniqueInteractions;
            cumulativeData[verb].cumulativeCount = cumulativeData[verb][yearMonth];
        });

        const sortedMonths = Array.from(allMonths).sort();

        const datasets = Object.keys(cumulativeData).map(verb => {
            let lastCount = 0;
            const dataPoints = sortedMonths.map(month => {
                if (cumulativeData[verb][month] != null) {
                    lastCount = cumulativeData[verb][month];
                }
                return lastCount;
            });

            return {
                label: getVerbFromUrl(verb),
                data: dataPoints,
                fill: false,
                borderColor: getRandomColor(),
                tension: 0.1
            };
        });

        const ctx = document.getElementById(chartId).getContext('2d');
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: sortedMonths,
                datasets: datasets
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        title: { display: true, text: 'Cumulative Interactions' }
                    },
                    x: {
                        title: { display: true, text: 'Year-Month' }
                    }
                },
                plugins: {
                    legend: { display: true, position: 'bottom' }
                }
            }
        });
    }

    function getRandomColor() {
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    function getVerbFromUrl(url) {
        const verbName = url.substring(url.lastIndexOf('/') + 1);
        return verbName.charAt(0).toUpperCase() + verbName.slice(1);
    }
});
</script>

<%- include('../../partials/footer') %>